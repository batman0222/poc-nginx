client_max_body_size 1k;
########### hash #############
# map変数のハッシュテーブルのbucketサイズを設定
map_hash_bucket_size 128;
# map変数のハッシュテーブルの最大size
map_hash_max_size 2048;
##############################

######### autoindex ##########
#autoindex on;
#autoindex_exact_size off;
#autoindex_localtime on;
##############################

# Syntax:	map string $variable { ... }
# Context:	http
map $http_user_agent $device {
    default pc;
    =curl/7.66.0 Perfect_Match;
    ~curl $http_user_agent;
}

# プロキシのキャッシュ用のパス
# levels : キャッシュを保存するディレクトリ階層とディレクトリ名の文字数
# keys_zone : proxy_cacheディレクティブで指定するキー
proxy_cache_path /var/cache/nginx/proxy_temp/domain levels=1:2 keys_zone=cache_domain:15m max_size=100m inactive=10s;

# Dos攻撃対策 DDosには非対応。。
# limit_req_zone [キー名] [zone名] [リクエスト数]
limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;

upstream backend {
    # 接続先選定のアルゴリズム
    least_conn;
    # ip_hash;

    # 300s以内に3回リクエストが失敗したら300s以下のサーバへリクエストしない
    server webapp001:5000 weight=5 max_fails=3 fail_timeout=60s;
    server webapp002:5000 weight=5 max_fails=3 fail_timeout=60s;

    # 他サーバが死んだらbackupへリクエスト
    server webapp003:5000 backup;

    # コールドスタンバイ、downを指定していう限りはリクエストは飛ばない
    server webapp004 down;
}

server {
    listen 80;
    server_name example.com;
    return 301 https://$host$request_uri;
}

server {
    server_name nginx.dev.com;
    listen 443 ssl;

    # メンテナンスモード用のフラグ
    set $maintenance 0;
    # Dos攻撃対策(5リクエスト/秒以上のリクエストで503を返す)
    limit_req zone=one burst=5;

    # SSL証明書ファイルのパス
    ssl_certificate /etc/ssl/certs/server.crt;
    # 秘密鍵ファイルのパス
    ssl_certificate_key /etc/ssl/certs/server.key;
    # SSLのセッションキャッシュ
    ssl_session_cache   shared:SSL:10m;
    # SSLセッションキャッシュのタイムアウト
    ssl_session_timeout  5m;
    # SSL/TLSプロトコルの指定
    ssl_protocols TLSv1.2 TLSv1.3;
    # サーバ側指定の暗号化プロトコルの優先設定
    ssl_ciphers  HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers   on;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    # faviconのログは取らない
    location = /favicon.ico {
	log_not_found off;
        access_log off;
    }

    # Nginxサーバのステータスチェック
    location /__status {
	stub_status on;
	# ローカル、同一ネットワーク内からのみアクセス可能
	allow 127.0.0.1;
	allow 192.168.2.0/24;
	deny all;
    }

    # 完全なURIを与えているので/app/は削除され/へアクセス(/uri,/uri/も同様)
    location /uri/ {
	root /usr/share/nginx/html;

        # HTTPメソッドを指定してクライアントにキャッシュさせない
	if ($request_method = "HEAD") {
	    expires -1;
	}

	# メンテナンス時はメンテナンスページを返す
	if ($maintenance) {
            return 503;
	}

	# 許可するメソッドを定義
	limit_except GET POST PUT HEAD OPTIONS {
	    allow all;
	}

	# 転送先のupstremを指定
        proxy_pass http://backend/;

	# プロキシ時のhttpのバージョンを指定
	proxy_http_version 1.1;

	# リバースプロキシ時にリダイレクトをするk
	proxy_redirect off;

	# バッファリングするかどうか設定(offだとキャッシュをしない)
	proxy_buffering on;

	# バッファのサイズ
	proxy_buffer_size 4k;

	# proxy_buffer_sizeの次に使われるメモリ上のサイズ数
	proxy_buffers 8 4k;

        # プロキシのキャッシュ
	proxy_cache cache_domain;

	# リクエストのためにキーが計算される方法を定義
	proxy_cache_key $host$uri$is_args$args;

        # キャッシュを行うステータスコードとその際の有効期限を指定
	# 404などをキャッシュすると結果のみをキャッシュする
	proxy_cache_valid 200 201 300 301 302 1d;

	# 下記がヘッダーにある場合はキャッシュを使用しない
	proxy_ignore_headers X-Accel-Redirect X-Accel-Expires Cache-Control Expires Vary Set-Cookie;

	# レスポンスヘッダにキャッシュヒットしたかどうかを含める
        add_header X-Nginx-Cache $upstream_cache_status;

	# セキュリティ関連ヘッダー
	add_header X-XSS-Protection "1; mode=block";
	add_header X-Frame-Options DENY;
	add_header X-Content-Type-Options nosniff;
	add_header Strict-Transport-Security max-age=15768000;
	add_header Referrer-Policy no-referrer always;

	# コネクション接続までのタイムアウト
	proxy_connect_timeout 60s;

	# バックエンドサーバからの受信完了までの時間
	proxy_read_timeout 100s;

	# バックエンドサーバへのデータ送信完了までの時間
	proxy_send_timeout 60s;

	# 失敗したリクエストを他のサーバに再送する条件(offにすることも可能)
	proxy_next_upstream error timeout http_504;

	# Nginx 側でリクエストがタイムアウトしたと判断するまでの時間
	# この設定を入れることで上位サーバがタイムアウトした際に次のサーバへリクエストを投げない
	proxy_next_upstream_timeout 60s;

	# 条件に合致したリクエストを、最大で何台のサーバに送信するか
	proxy_next_upstream_tries 1;

        # エラー時でもproxy先ではなくngixnのエラーを返す
	proxy_intercept_errors on;

	# クライントとの接続でのタイムアウト
	keepalive_timeout 60s;

        # 持続的な接続上で許可されるリクエストの数を設定
	keepalive_requests 100;

	###### proxy_set_header #####
        proxy_set_header Host $http_host;
	proxy_set_header Uri $uri;
	proxy_set_header Method $request_method;
	proxy_set_header Scheme $scheme;
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	proxy_set_header X-Forwarded-Server $host;
	proxy_set_header X-Ua-Mapping $device;
	##############################
    }

    location /no_uri {
        proxy_pass http://backend;
    }

    # 画像関連 / キャッシュのテストなど用
    location /images/ {
	root /usr/share/nginx/html;
	try_files $uri $uri.png;
	etag on;
    }

    error_page 404 /404.html;
    location = /404.html {
	root /usr/share/nginx/html;
	internal;
    }

    error_page 503 /503.json;

    error_page 500 502 504 /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}

server {
    listen 443 ssl http2;
    server_name ib.dev.com;

    # SSL証明書ファイルのパス
    ssl_certificate /etc/ssl/certs/server_wild.crt;
    # 秘密鍵ファイルのパス
    ssl_certificate_key /etc/ssl/certs/server_wild.key;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;

	# 転送先のupstremを指定
        proxy_pass http://backend/;
	proxy_set_header X-AA aaa;
    }
}
